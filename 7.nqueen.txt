def printboard(board):
    for row in board:
        print(" ".join("Q" if x else "." for x in row))
    print("\n")

def isSafe(board,row,col,n):
    for i in range(row):
        if board[i][col]==1:
            return False
        
    for i,j in zip(range(row-1,-1,-1),range(col-1,-1,-1)):
        if board[i][j]==1:
            return False
    
    for i,j in zip(range(row-1,-1,-1),range(col+1,n)):
        if board[i][j]==1:
            return False
    
    return True


def solve_n_queen(board,row,n):
    if row>=n:
        return True
    for col in range(n):
        if isSafe(board,row,col,n):
            board[row][col]=1

            if solve_n_queen(board,row+1,n):
                return True
            
            board[row][col]=0

    return False

def n_queen(n):
    board=[[0 for i in range(n)]for j in range(n)]
    if solve_n_queen(board,0,n):
        printboard(board)
    else:
        print("Solution does not exists.")

if __name__=="__main__":
    n=int(input("Enter the number of queens: "))
    n_queen(n)